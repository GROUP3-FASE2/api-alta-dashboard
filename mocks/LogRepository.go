// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	log "api-alta-dashboard/features/log"

	mock "github.com/stretchr/testify/mock"
)

// LogRepository is an autogenerated mock type for the RepositoryInterface type
type LogRepository struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: input
func (_m *LogRepository) CreateLog(input log.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(log.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLog provides a mock function with given fields: id
func (_m *LogRepository) DeleteLog(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllLog provides a mock function with given fields:
func (_m *LogRepository) GetAllLog() ([]log.Core, error) {
	ret := _m.Called()

	var r0 []log.Core
	if rf, ok := ret.Get(0).(func() []log.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]log.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithSearchLog provides a mock function with given fields: query
func (_m *LogRepository) GetAllWithSearchLog(query string) ([]log.Core, error) {
	ret := _m.Called(query)

	var r0 []log.Core
	if rf, ok := ret.Get(0).(func(string) []log.Core); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]log.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLog provides a mock function with given fields: input, id
func (_m *LogRepository) UpdateLog(input log.Core, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(log.Core, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogRepository creates a new instance of LogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogRepository(t mockConstructorTestingTNewLogRepository) *LogRepository {
	mock := &LogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
